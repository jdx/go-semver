package semver

import (
	"encoding/json"
	"fmt"
	"sort"
	"testing"

	. "github.com/franela/goblin"
)

type testJSON struct {
	Version *Version `json:"version"`
	Range   *Range   `json:"range"`
}

func parseJSON(raw string) testJSON {
	var o testJSON
	must(json.Unmarshal([]byte(raw), &o))
	return o
}

func renderJSON(j *testJSON) string {
	bytes, err := json.Marshal(j)
	must(err)
	return string(bytes)
}

func v(s string) *Version {
	return MustParse(s)
}
func r(s string) *Range {
	return MustParseRange(s)
}
func Test(t *testing.T) {
	g := Goblin(t)
	g.Describe("Parse", func() {
		checkRange := func(rawRange, rawVersion string, ok bool) {
			r := MustParseRange(rawRange)
			v := MustParse(rawVersion)
			d := fmt.Sprintf("%s in %s", r, v)
			if !ok {
				d = fmt.Sprintf("%s not in %s", r, v)
			}
			g.It(d, func() {
				g.Assert(r.Valid(v)).Equal(ok)
			})
		}

		checkRange(">1.0.0", "0.1.0", false)
		checkRange(">1.0.0", "1.0.0", false)
		checkRange(">1.0.0", "2.0.0", true)
		checkRange(">=1.0.0", "1.0.0", true)
		checkRange(">=1.0.0", "2.0.0", true)
		checkRange(">=1.0.0", "0.1.0", false)
		checkRange("<1.0.0", "1.0.0", false)
		checkRange("<1.0.0", "0.1.0", true)
		checkRange("<=1.0.0", "0.1.0", true)
		checkRange("<=1.0.0", "1.0.0", true)
		checkRange("<=1.0.0", "1.1.0", false)
		checkRange("=1.0.0", "1.1.0", false)
		checkRange("=1.0.0", "1.0.0", true)
		checkRange("1.0.0", "1.0.0", true)
		checkRange("1.0.0", "1.0.1", false)
		checkRange("1.2.3 - 1.2.4", "1.2.2", false)
		checkRange("1.2.3 - 1.2.4", "1.2.3", true)
		checkRange("1.2.3 - 1.2.4", "1.2.4", true)
		checkRange("1.2.3 - 1.2.4", "1.2.5", false)
		checkRange("> 1.2.3 < 1.2.5", "1.2.2", false)
		checkRange("> 1.2.3 < 1.2.5", "1.2.3", false)
		checkRange("> 1.2.3 < 1.2.5", "1.2.4", true)
		checkRange("> 1.2.3 < 1.2.5", "1.2.5", false)
		checkRange("~ 1.2.3", "1.2.5", true)
		checkRange("~ 1.2.3", "1.3.0", false)
		checkRange("~ 1.2.3", "1.2.2", false)
		checkRange("~ 1.2.3", "1.2.3", true)
		checkRange("^ 1.2.3", "1.2.5", true)
		checkRange("^ 1.2.3", "1.3.0", true)
		checkRange("^ 1.2.3", "2.0.0", false)
		checkRange("^ 1.2.3", "1.2.2", false)
		checkRange("^ 1.2.3", "1.2.3", true)
		checkRange("1.0.0 - 2.0.0", "1.2.3", true)
		checkRange("1.2.3+build", "1.2.3", true)
		checkRange("^1.2.3+build", "1.3.0", true)
		checkRange("1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3", true)
		// checkRange("1.2.3pre+asdf - 2.4.3-pre+asdf", "1.2.3", true, true)
		// checkRange("1.2.3-pre+asdf - 2.4.3pre+asdf", "1.2.3", true, true)
		// checkRange("1.2.3pre+asdf - 2.4.3pre+asdf", "1.2.3", true, true)
		checkRange("1.2.3-pre+asdf - 2.4.3-pre+asdf", "1.2.3-pre.2", true)
		checkRange("1.2.3-pre+asdf - 2.4.3-pre+asdf", "2.4.3-alpha", true)
		checkRange("1.2.3+asdf - 2.4.3+asdf", "1.2.3", true)
		checkRange("1.0.0", "1.0.0", true)
		checkRange(">=*", "0.2.4", true)
		checkRange("", "1.0.0", true)
		checkRange("*", "1.2.3", true)
		// checkRange("*", "v1.2.3", true, true)
		checkRange(">=1.0.0", "1.0.0", true)
		checkRange(">=1.0.0", "1.0.1", true)
		checkRange(">=1.0.0", "1.1.0", true)
		checkRange(">1.0.0", "1.0.1", true)
		checkRange(">1.0.0", "1.1.0", true)
		checkRange("<=2.0.0", "2.0.0", true)
		checkRange("<=2.0.0", "1.9999.9999", true)
		checkRange("<=2.0.0", "0.2.9", true)
		checkRange("<2.0.0", "1.9999.9999", true)
		checkRange("<2.0.0", "0.2.9", true)
		checkRange(">= 1.0.0", "1.0.0", true)
		checkRange(">=  1.0.0", "1.0.1", true)
		checkRange(">=   1.0.0", "1.1.0", true)
		checkRange("> 1.0.0", "1.0.1", true)
		checkRange(">  1.0.0", "1.1.0", true)
		checkRange("<=   2.0.0", "2.0.0", true)
		checkRange("<= 2.0.0", "1.9999.9999", true)
		checkRange("<=  2.0.0", "0.2.9", true)
		checkRange("<    2.0.0", "1.9999.9999", true)
		checkRange("<\t2.0.0", "0.2.9", true)
		// checkRange(">=0.1.97", "v0.1.97", true, true)
		checkRange(">=0.1.97", "0.1.97", true)
		checkRange("0.1.20 || 1.2.4", "1.2.4", true)
		checkRange(">=0.2.3 || <0.0.1", "0.0.0", true)
		checkRange(">=0.2.3 || <0.0.1", "0.2.3", true)
		checkRange(">=0.2.3 || <0.0.1", "0.2.4", true)
		checkRange("||", "1.3.4", true)
		checkRange("2.x.x", "2.1.3", true)
		checkRange("1.2.x", "1.2.3", true)
		checkRange("1.2.x || 2.x", "2.1.3", true)
		checkRange("1.2.x || 2.x", "1.2.3", true)
		checkRange("x", "1.2.3", true)
		checkRange("2.*.*", "2.1.3", true)
		checkRange("1.2.*", "1.2.3", true)
		checkRange("1.2.* || 2.*", "2.1.3", true)
		checkRange("1.2.* || 2.*", "1.2.3", true)
		checkRange("*", "1.2.3", true)
		checkRange("2", "2.1.2", true)
		checkRange("2.3", "2.3.1", true)
		checkRange("~x", "0.0.9", true)
		checkRange("~2", "2.0.9", true)
		checkRange("~2.4", "2.4.0", true)
		checkRange("~2.4", "2.4.5", true)
		checkRange("~>3.2.1", "3.2.2", true)
		checkRange("~1", "1.2.3", true)
		checkRange("~>1", "1.2.3", true)
		checkRange("~> 1", "1.2.3", true)
		checkRange("~1.0", "1.0.2", true)
		checkRange("~ 1.0", "1.0.2", true)
		checkRange("~ 1.0.3", "1.0.12", true)
		checkRange(">=1", "1.0.0", true)
		checkRange(">= 1", "1.0.0", true)
		checkRange("<1.2", "1.1.1", true)
		checkRange("< 1.2", "1.1.1", true)
		checkRange("~v0.5.4-pre", "0.5.5", true)
		checkRange("~v0.5.4-pre", "0.5.4", true)
		checkRange("=0.7.x", "0.7.2", true)
		checkRange("<=0.7.x", "0.7.2", true)
		checkRange(">=0.7.x", "0.7.2", true)
		checkRange("<=0.7.x", "0.6.2", true)
		checkRange("~1.2.1 >=1.2.3", "1.2.3", true)
		checkRange("~1.2.1 =1.2.3", "1.2.3", true)
		checkRange("~1.2.1 1.2.3", "1.2.3", true)
		checkRange("~1.2.1 >=1.2.3 1.2.3", "1.2.3", true)
		checkRange("~1.2.1 1.2.3 >=1.2.3", "1.2.3", true)
		checkRange("~1.2.1 1.2.3", "1.2.3", true)
		checkRange(">=1.2.1 1.2.3", "1.2.3", true)
		checkRange("1.2.3 >=1.2.1", "1.2.3", true)
		checkRange(">=1.2.3 >=1.2.1", "1.2.3", true)
		checkRange(">=1.2.1 >=1.2.3", "1.2.3", true)
		checkRange(">=1.2", "1.2.8", true)
		checkRange("^1.2.3", "1.8.1", true)
		checkRange("^0.1.2", "0.1.2", true)
		checkRange("^0.1", "0.1.2", true)
		checkRange("^0.0.1", "0.0.1", true)
		checkRange("^1.2", "1.4.2", true)
		checkRange("^1.2 ^1", "1.4.2", true)
		checkRange("^1.2.3-alpha", "1.2.3-pre", true)
		checkRange("^1.2.0-alpha", "1.2.0-pre", true)
		checkRange("^0.0.1-alpha", "0.0.1-beta", true)
		checkRange("^0.1.1-alpha", "0.1.1-beta", true)
		checkRange("^x", "1.2.3", true)
		checkRange("x - 1.0.0", "0.9.7", true)
		checkRange("x - 1.x", "0.9.7", true)
		checkRange("1.0.0 - x", "1.9.7", true)
		checkRange("1.x - x", "1.9.7", true)
		checkRange("<=7.x", "7.9.9", true)

		g.It("sorts", func() {
			versions := Versions{v("1.2.3"), v("2.0.0"), v("1.4.2"), v("1.2.4")}
			sort.Sort(versions)
			g.Assert(versions[0]).Equal(v("1.2.3"))
			g.Assert(versions[1]).Equal(v("1.2.4"))
			g.Assert(versions[2]).Equal(v("1.4.2"))
			g.Assert(versions[3]).Equal(v("2.0.0"))
		})

		g.Xit("encodes/decodes json", func() {
			g.Assert(parseJSON(renderJSON(&testJSON{Version: v("1.2.3"), Range: r("1.0.0")})).Version).Equal(&Version{})
		})

	})

	assert := func(desc string, expected, actual interface{}) {
		g.It(desc, func() {
			g.Assert(actual).Equal(expected)
		})
	}

	g.Describe("prerelease", func() {
		prerelease := func(expected []string, v string) {
			version := MustParse(v)
			assert(fmt.Sprintf("prerelease(%q) == %q", version, expected), version.Prerelease, expected)
		}
		prerelease([]string{"alpha", "1"}, "1.2.2-alpha.1")
		prerelease([]string{"1"}, "0.6.1-1")
		prerelease([]string{"beta", "2"}, "1.0.0-beta.2")
		prerelease([]string{"pre"}, "v0.5.4-pre")
		prerelease([]string{"alpha", "1"}, "1.2.2-alpha.1")
		// prerelease([]string{}, "invalid version")
	})

	g.Describe("GT", func() {
		test := func(a, b string) {
			assert(fmt.Sprintf("%s > %s", a, b), MustParse(a).GT(MustParse(b)), true)
		}
		test("0.0.0", "0.0.0-foo")
		test("0.0.1", "0.0.0")
		test("1.0.0", "0.9.9")
		test("0.10.0", "0.9.0")
		test("0.99.0", "0.10.0")
		test("2.0.0", "1.2.3")
		// test("v0.0.0", "0.0.0-foo", true)
		// test("v0.0.1", "0.0.0", true)
		// test("v1.0.0", "0.9.9", true)
		// test("v0.10.0", "0.9.0", true)
		// test("v0.99.0", "0.10.0", true)
		// test("v2.0.0", "1.2.3", true)
		// test("0.0.0", "v0.0.0-foo", true)
		// test("0.0.1", "v0.0.0", true)
		// test("1.0.0", "v0.9.9", true)
		// test("0.10.0", "v0.9.0", true)
		// test("0.99.0", "v0.10.0", true)
		// test("2.0.0", "v1.2.3", true)
		test("1.2.3", "1.2.3-asdf")
		test("1.2.3", "1.2.3-4")
		test("1.2.3", "1.2.3-4-foo")
		test("1.2.3-5-foo", "1.2.3-5")
		test("1.2.3-5", "1.2.3-4")
		test("1.2.3-5-foo", "1.2.3-5-Foo")
		test("3.0.0", "2.7.2+asdf")
		test("1.2.3-a.10", "1.2.3-a.5")
		test("1.2.3-a.b", "1.2.3-a.5")
		test("1.2.3-a.b", "1.2.3-a")
		test("1.2.3-a.b.c.10.d.5", "1.2.3-a.b.c.5.d.100")
		test("1.2.3-r2", "1.2.3-r100")
		test("1.2.3-r100", "1.2.3-R2")
	})

	g.Describe("version is greater than", func() {
		test := func(r, v string) {
			g.Xit(`gtr(`+v+", "+r+")", func() {
				// g.Assert(MustParseRange(r).GT(MustParse(v))).IsTrue()
			})
		}
		test("~1.2.2", "1.3.0")
		test("~0.6.1-1", "0.7.1-1")
		test("1.0.0 - 2.0.0", "2.0.1")
		test("1.0.0", "1.0.1-beta1")
		test("1.0.0", "2.0.0")
		test("<=2.0.0", "2.1.1")
		test("<=2.0.0", "3.2.9")
		test("<2.0.0", "2.0.0")
		test("0.1.20 || 1.2.4", "1.2.5")
		test("2.x.x", "3.0.0")
		test("1.2.x", "1.3.0")
		test("1.2.x || 2.x", "3.0.0")
		test("2.*.*", "5.0.1")
		test("1.2.*", "1.3.3")
		test("1.2.* || 2.*", "4.0.0")
		test("2", "3.0.0")
		test("2.3", "2.4.2")
		test("~2.4", "2.5.0")
		test("~2.4", "2.5.5")
		test("~>3.2.1", "3.3.0")
		test("~1", "2.2.3")
		test("~>1", "2.2.4")
		test("~> 1", "3.2.3")
		test("~1.0", "1.1.2")
		test("~ 1.0", "1.1.0")
		test("<1.2", "1.2.0")
		test("< 1.2", "1.2.1")
		// test("1", "2.0.0beta")
		test("~v0.5.4-pre", "0.6.0")
		test("~v0.5.4-pre", "0.6.1-pre")
		test("=0.7.x", "0.8.0")
		test("=0.7.x", "0.8.0-asdf")
		test("<0.7.x", "0.7.0")
		test("~1.2.2", "1.3.0")
		test("1.0.0 - 2.0.0", "2.2.3")
		test("1.0.0", "1.0.1")
		test("<=2.0.0", "3.0.0")
		test("<=2.0.0", "2.9999.9999")
		test("<=2.0.0", "2.2.9")
		test("<2.0.0", "2.9999.9999")
		test("<2.0.0", "2.2.9")
		test("2.x.x", "3.1.3")
		test("1.2.x", "1.3.3")
		test("1.2.x || 2.x", "3.1.3")
		test("2.*.*", "3.1.3")
		test("1.2.*", "1.3.3")
		test("1.2.* || 2.*", "3.1.3")
		test("2", "3.1.2")
		test("2.3", "2.4.1")
		test("~2.4", "2.5.0")
		test("~>3.2.1", "3.3.2")
		test("~1", "2.2.3")
		test("~>1", "2.2.3")
		test("~1.0", "1.1.0")
		test("<1", "1.0.0")
		// test("1", "2.0.0beta")
		// test("<1", "1.0.0beta")
		// test("< 1", "1.0.0beta")
		test("=0.7.x", "0.8.2")
		test("<0.7.x", "0.7.2")
	})
}
